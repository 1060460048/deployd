var dpd = require('dpd')
  , db = require('db')
  , models = db.use('models')
  , settings = db.use('settings')
;

dpd.on('middleware', function(app) {
  app.all('/:model/?action', function(req, res, next) {
    var model = req.param('model')
      , action = req.param('action')
    ;
    
    // validate the request is to a url that matches a model
    settings.first({name: model.name}, function(err, settings) {
      if(model) {
        req.model = {
          settings: settings,
          action: action
        };
      }
      
      // next middleware
      next();
    });
  });
  
  app.use(function(req, res, next) {
    var valid = true;
    if(req.model) {
      if(req.isRoot()) {
        next(); // root does not have restrictions
      } else if(req.isUser()) {
        // TODO validate the user for the current model operation
        if(valid) next();
      } else {
        // TODO annonymous validation
        if(valid) next();
      }
    }
  });
  
  app.use(function(req, res, next) {
	  var model = req.model
	    , search = model && model.action.toUpperCase() === 'SEARCH'
	    , errors = res.errors
	  ;
	  
	  // the request is a model query
	  if(model && (search || req.method.toUpperCase() === 'GET')) {
      // TDOO validate req.query with req.model.settings.allowed
      if(errors.length) {
        next();
      } else {
        // execute query
        var limtit = req.param('limit') || model.settings.perPage;
        db.use(req.model.settings.name).limit(limtit).get(req.query || req.body, function(err, results) {
          res.data = results;
          next(err);
        });
      }
    } else {
      next();
    }
  });
  
  app.use(function(req, res, next) {
	  // validate the input against query permissions
	  var model = req.model
	    , method = req.method.toUpperCase()
	    , errors = res.errors
	  ;
	  
	  // the request is to insert or update data
	  if(model && (method === 'POST' || method === 'PUT')) {
      // TDOO validate req.body with req.model.settings.description
      if(errors.length) {
        next();
      } else {
        // execute upsert
        db.use(req.model.settings.name).post(req.body, function(err, results) {
          res.data = results;
          next(err);
        });
      }
    } else {
      next();
    }
  });
  
  app.use(function(req, res, next) {
    if(req.model && res.data) {
      // TODO validate the data against post-data permissions
      var errors = res.errors && res.errors.length;
      if(errors) {
        next();
      } else {
        res.send(data);        
      }
    } else {
      next();
    }
  });
});